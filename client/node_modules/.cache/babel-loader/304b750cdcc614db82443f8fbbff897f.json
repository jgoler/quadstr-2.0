{"ast":null,"code":"var _jsxFileName = \"/Users/jackgoler/Desktop/quadstr_2.0/client/src/components/profile/AboutChat.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\n\nconst AboutChat = ({\n  getChatById,\n  profile: {\n    chat\n  },\n  //chats: { chat, loading },\n  match\n}) => {\n  useEffect(() => {\n    getChatById(match.params.id);\n  }, [getChatById, match.params.id]);\n  return chat ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, \"About \", chat.title), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, \"Chat Code: \", chat.code), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, \"Users\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, chat.users.length > 0 ? chat.users.map(member => /*#__PURE__*/React.createElement(\"li\", {\n    key: member._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 15\n    }\n  }, member.name))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }\n  }, \"There are no members in this chat\"))))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"Loading...\");\n  /*\n  return chat ? <Fragment>\n    <h1 className=\"large text-primary\">{chat.title}</h1>\n    <p className=\"lead\">Welcome to {chat.title}</p>\n    <Link to={`/chat-details/${chat._id}`}>Chat Details</Link>\n    <br />\n    <Link to={`/post-form/${chat._id}`}>Create Post</Link>\n    <p className=\"lead\">\n      Posts\n    </p>\n    <div className=\"posts\">\n      {chat.posts.length > 0 ? chat.posts.map(post => (\n        <div className=\"profile bg-light\" key={post._id}>\n          <div>\n            <h2><Link to=\"#!\">{post.title}</Link></h2>\n          </div>\n          <div>\n            {post.text}\n          </div>\n        </div>\n      )) : <h4>No posts</h4>}\n    </div>\n   </Fragment> : <p>Loading...</p>\n  */\n};\n/*\nconst Chat = ({\n  getChatById,\n  profile: { chat },\n  //chats: { chat, loading }, \n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.id);\n  }, [getChatById]);\n  return (\n    <Fragment>\n      <h1>{chat}</h1>\n    </Fragment>\n  )\n}\n\n*/\n\n\nAboutChat.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getChatById\n})(AboutChat);","map":{"version":3,"sources":["/Users/jackgoler/Desktop/quadstr_2.0/client/src/components/profile/AboutChat.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getChatById","AboutChat","profile","chat","match","params","id","title","code","users","length","map","member","_id","name","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACjBD,EAAAA,WADiB;AAEjBE,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF,GAFQ;AAGjB;AACAC,EAAAA;AAJiB,CAAD,KAIJ;AACZP,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAX;AACD,GAFQ,EAEN,CAACN,WAAD,EAAcI,KAAK,CAACC,MAAN,CAAaC,EAA3B,CAFM,CAAT;AAIA,SAAOH,IAAI,gBAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACZ;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA0CA,IAAI,CAACI,KAA/C,CADY,eAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBJ,IAAI,CAACK,IAArB,CAFY,eAIZ;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJY,eAKZ;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,IAAI,CAACM,KAAL,CAAWC,MAAX,GAAoB,CAApB,GAAwBP,IAAI,CAACM,KAAL,CAAWE,GAAX,CAAeC,MAAM,iBAC5C;AAAI,IAAA,GAAG,EAAEA,MAAM,CAACC,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,MAAM,CAACE,IAAX,CADF,CADuB,CAAxB,gBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCALP,CADF,CADF,CALY,CAAH,gBAgBG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBd;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;AAyBD,CApDD;AAsDA;;;;;;;;;;;;;;;;;;;AAiBAb,SAAS,CAACc,SAAV,GAAsB;AACpBf,EAAAA,WAAW,EAAEF,SAAS,CAACkB,IAAV,CAAeC,UADR;AAEpBd,EAAAA,IAAI,EAAEL,SAAS,CAACoB,MAAV,CAAiBD;AAFH,CAAtB;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChClB,EAAAA,OAAO,EAAEkB,KAAK,CAAClB;AADiB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,SAA1C,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\n\nconst AboutChat = ({\n  getChatById,\n  profile: { chat },\n  //chats: { chat, loading },\n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.id)\n  }, [getChatById, match.params.id])\n\n  return chat ? <Fragment>\n    <h1 className=\"large text-primary\">About {chat.title}</h1>\n    <h3>Chat Code: {chat.code}</h3>\n\n    <p className=\"lead\">Users</p>\n    <div className=\"profiles\">\n      <div className=\"profile bg-light\">\n        <ul>\n          {chat.users.length > 0 ? chat.users.map(member => (\n            <li key={member._id}>\n              <p>{member.name}</p>\n            </li>\n          )) : <p>There are no members in this chat</p>}\n        </ul>\n      </div>\n    </div>\n  </Fragment> : <Fragment>Loading...</Fragment>\n\n  /*\n  return chat ? <Fragment>\n    <h1 className=\"large text-primary\">{chat.title}</h1>\n    <p className=\"lead\">Welcome to {chat.title}</p>\n    <Link to={`/chat-details/${chat._id}`}>Chat Details</Link>\n    <br />\n    <Link to={`/post-form/${chat._id}`}>Create Post</Link>\n    <p className=\"lead\">\n      Posts\n    </p>\n    <div className=\"posts\">\n      {chat.posts.length > 0 ? chat.posts.map(post => (\n        <div className=\"profile bg-light\" key={post._id}>\n          <div>\n            <h2><Link to=\"#!\">{post.title}</Link></h2>\n          </div>\n          <div>\n            {post.text}\n          </div>\n        </div>\n      )) : <h4>No posts</h4>}\n    </div>\n\n  </Fragment> : <p>Loading...</p>\n*/\n}\n\n/*\nconst Chat = ({\n  getChatById,\n  profile: { chat },\n  //chats: { chat, loading }, \n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.id);\n  }, [getChatById]);\n  return (\n    <Fragment>\n      <h1>{chat}</h1>\n    </Fragment>\n  )\n}\n\n*/\nAboutChat.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired,\n\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n})\n\nexport default connect(mapStateToProps, { getChatById })(AboutChat);"]},"metadata":{},"sourceType":"module"}