{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE, CONFIRM_SUCCESS, CONFIRM_FAIL, CONFIRM_STARTED } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); //history.push('/confirm');\n    //dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert('Please confirm your email to continue'), 'danger');\n    /*\n    const errors = err.response.data.errors;\n     if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    */\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Confirm User\n\nexport const confirm = (email, code) => async dispatch => {\n  dispatch({\n    type: CONFIRM_STARTED\n  });\n\n  try {\n    const res = await axios.get(`/api/auth/confirm?email=${email}&code=${code}`);\n    dispatch({\n      type: CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CONFIRM_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/jackgoler/quadstr-2.0/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","CONFIRM_SUCCESS","CONFIRM_FAIL","CONFIRM_STARTED","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","history","config","headers","body","JSON","stringify","post","confirm","code","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE,\n  CONFIRM_SUCCESS,\n  CONFIRM_FAIL,\n  CONFIRM_STARTED\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}\n\n\n// Register User\nexport const register = ({ name, email, password }, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n\n    //history.push('/confirm');\n    //dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert('Please confirm your email to continue'), 'danger');\n    /*\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    */\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}\n\n// Confirm User\nexport const confirm = (email, code) => async dispatch => {\n  dispatch({\n    type: CONFIRM_STARTED\n  });\n  try {\n    const res = await axios.get(`/api/auth/confirm?email=${email}&code=${code}`)\n\n    dispatch({\n      type: CONFIRM_SUCCESS\n    });\n\n\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n\n    dispatch({\n      type: CONFIRM_FAIL\n    });\n  }\n}\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n}"]},"metadata":{},"sourceType":"module"}