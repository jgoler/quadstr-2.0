{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { CREATE_SUCCESS, CREATE_FAIL, USER_LOADED, AUTH_ERROR, JOIN_SUCCESS, JOIN_FAIL, ADD_POST, ADD_COMMENT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n// Add comment\n\nexport const addComment = (chatId, postId, formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(`/api/chats/post/comment/${chatId}/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Created', 'success'));\n    history.push(`/post/${chatId}/${postId}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n  }\n}; // Add post\n\nexport const addPost = (chatId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //const body = JSON.stringify({ title, text });\n\n  try {\n    const res = await axios.post(`/api/chats/${chatId}`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success')); //history.push('/profile');\n    //history.push(`/chat/${chatId}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    /*\n    dispatch({\n      type: POST_FAIL\n    });\n    */\n\n  }\n}; // Create Chat\n\nexport const createChat = ({\n  title,\n  password,\n  password2\n}, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    title,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n    dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    });\n    history.push('/profile'); // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n};\n/*\n// Join Chat\n// Login User\nexport const joinChat = ({code, password}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    //dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = ( formData, history ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n}\n*/\n// Join Chat\n\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert('Chat Joined', 'success'));\n    history.push('/profile');\n  } catch (err) {\n    //const errors = err.response.data.errors;\n\n    /*\n        if (errors) {\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        \n        */\n    dispatch(setAlert('Invalid Credentials'), 'danger');\n    dispatch({\n      type: JOIN_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jackgoler/Desktop/quadstr/client/src/actions/chat.js"],"names":["axios","setAlert","CREATE_SUCCESS","CREATE_FAIL","USER_LOADED","AUTH_ERROR","JOIN_SUCCESS","JOIN_FAIL","ADD_POST","ADD_COMMENT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","addComment","chatId","postId","formData","history","config","headers","put","push","errors","response","forEach","error","msg","addPost","post","createChat","title","password","password2","body","JSON","stringify","joinChat","statusText","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,YALF,EAMEC,SANF,EAOEC,QAPF,EAQEC,WARF,QASO,SATP;AAUA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb,WADC;AAEPc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAGD;AACF,CAjBM;AAmBP;;;;;;;;;;;;;;;;;;AAmBA;;AACA,OAAO,MAAMgB,UAAU,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BC,OAA3B,KAAuC,MAAMb,QAAN,IAAkB;AACjF,QAAMc,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AACF,UAAMZ,GAAG,GAAG,MAAMf,KAAK,CAAC4B,GAAN,CAAW,2BAA0BN,MAAO,IAAGC,MAAO,EAAtD,EAAyDC,QAAzD,EAAmEE,MAAnE,CAAlB;AACAd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAAT,CAAR;AAEAwB,IAAAA,OAAO,CAACI,IAAR,CAAc,SAAQP,MAAO,IAAGC,MAAO,EAAvC;AACD,GAVD,CAUE,OAAOH,GAAP,EAAY;AACZ,UAAMU,MAAM,GAAGV,GAAG,CAACW,QAAJ,CAAaZ,IAAb,CAAkBW,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIrB,QAAQ,CAACX,QAAQ,CAACgC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;AACF;AACF,CAxBM,C,CAyBP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACb,MAAD,EAASE,QAAT,KAAsB,MAAMZ,QAAN,IAAkB;AAC7D,QAAMc,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAD6D,CAO7D;;AAEA,MAAI;AACF,UAAMZ,GAAG,GAAG,MAAMf,KAAK,CAACoC,IAAN,CAAY,cAAad,MAAO,EAAhC,EAAmCE,QAAnC,EAA6CE,MAA7C,CAAlB;AACAd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,QADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR,CAPE,CASF;AACA;AACD,GAXD,CAWE,OAAOmB,GAAP,EAAY;AACZ,UAAMU,MAAM,GAAGV,GAAG,CAACW,QAAJ,CAAaZ,IAAb,CAAkBW,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIrB,QAAQ,CAACX,QAAQ,CAACgC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;AAED;;;;;;AAKD;AACF,CAjCM,C,CAkCP;;AACA,OAAO,MAAMG,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,EAAiCf,OAAjC,KAA6C,MAAMb,QAAN,IAAkB;AACvF,QAAMc,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMc,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMzB,GAAG,GAAG,MAAMf,KAAK,CAACoC,IAAN,CAAW,YAAX,EAAyBK,IAAzB,EAA+Bf,MAA/B,CAAlB;AAEAd,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEf,cADC;AAEPgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAM,IAAAA,OAAO,CAACI,IAAR,CAAa,UAAb,EARE,CAYF;AACA;AACD,GAdD,CAcE,OAAOT,GAAP,EAAY;AACZ,UAAMU,MAAM,GAAGV,GAAG,CAACW,QAAJ,CAAaZ,IAAb,CAAkBW,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIrB,QAAQ,CAACX,QAAQ,CAACgC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDtB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD;AACF,CAlCM;AAmCP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AACA,OAAO,MAAMyC,QAAQ,GAAG,CAACpB,QAAD,EAAWC,OAAX,KAAuB,MAAMb,QAAN,IAAkB;AAC/D,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMf,KAAK,CAAC4B,GAAN,CAAU,YAAV,EAAwBJ,QAAxB,CAAlB;AAEAZ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,YADC;AAEPY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,aAAD,EAAgB,SAAhB,CAAT,CAAR;AAEAwB,IAAAA,OAAO,CAACI,IAAR,CAAa,UAAb;AACD,GAXD,CAWE,OAAOT,GAAP,EAAY;AACZ;;AACA;;;;;;AAMAR,IAAAA,QAAQ,CAACX,QAAQ,CAAC,qBAAD,CAAT,EAAkC,QAAlC,CAAR;AAEAW,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,SADC;AAEPW,MAAAA,OAAO,EAAE;AAAEgB,QAAAA,GAAG,EAAEd,GAAG,CAACW,QAAJ,CAAac,UAApB;AAAgCC,QAAAA,MAAM,EAAE1B,GAAG,CAACW,QAAJ,CAAae;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CA3BM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  CREATE_SUCCESS,\n  CREATE_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  JOIN_SUCCESS,\n  JOIN_FAIL,\n  ADD_POST,\n  ADD_COMMENT\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}\n\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n\n// Add comment\nexport const addComment = (chatId, postId, formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  try {\n    const res = await axios.put(`/api/chats/post/comment/${chatId}/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Comment Created', 'success'));\n\n    history.push(`/post/${chatId}/${postId}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n  }\n}\n// Add post\nexport const addPost = (chatId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  //const body = JSON.stringify({ title, text });\n\n  try {\n    const res = await axios.post(`/api/chats/${chatId}`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n\n    //history.push('/profile');\n    //history.push(`/chat/${chatId}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    /*\n    dispatch({\n      type: POST_FAIL\n    });\n    */\n  }\n}\n// Create Chat\nexport const createChat = ({ title, password, password2 }, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ title, password, password2 });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n\n    dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n\n\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n}\n/*\n// Join Chat\n// Login User\nexport const joinChat = ({code, password}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    //dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n/*\n// Join Chat\nexport const joinChat = ( formData, history ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n}\n*/\n\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Chat Joined', 'success'));\n\n    history.push('/profile');\n  } catch (err) {\n    //const errors = err.response.data.errors;\n    /*\n        if (errors) {\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        \n        */\n    dispatch(setAlert('Invalid Credentials'), 'danger');\n\n    dispatch({\n      type: JOIN_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}