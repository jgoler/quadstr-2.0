{"ast":null,"code":"var _jsxFileName = \"/Users/jackgoler/Desktop/quadstr/client/src/components/profile/Post.js\";\n\n/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\nimport React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\nimport { addComment } from '../../actions/chat';\nimport { Link } from 'react-router-dom';\n\nconst Post = ({\n  getChatById,\n  addComment,\n  profile: {\n    chat\n  },\n  match\n}) => {\n  useEffect(() => {\n    getChatById(match.params.chatId);\n  }, [getChatById, match.params.chatId]);\n  const [formData, setFormData] = useState({\n    text: ''\n  });\n  const {\n    text\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n\n  /*\n  let post;\n  return chat ? <Fragment>\n    {post = chat.posts.find(post => post._id.toString() === match.params.postId)}\n    <h1>{post.title}</h1>\n    <h1>Test</h1>\n  </Fragment> : <p>Loading...</p>\n  */\n\n\n  if (!chat) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  const post = chat.posts.find(post => post._id.toString() === match.params.postId);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, post.title)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, post.text)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, \"Comments:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form-header bg-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Create a Comment\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form my-1\",\n    onSubmit: e => {\n      e.preventDefault();\n      addComment(match.params.chatId, match.params.postId, {\n        text\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    cols: \"30\",\n    rows: \"5\",\n    placeholder: \"Create a comment\",\n    name: \"text\",\n    value: text,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    class: \"btn btn-dark my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }), post.comments.length > 0 ? post.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile bg-light\",\n    key: comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, comment.text)))) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 10\n    }\n  }, \"No comments\"));\n};\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getChatById,\n  addComment\n})(Post);","map":{"version":3,"sources":["/Users/jackgoler/Desktop/quadstr/client/src/components/profile/Post.js"],"names":["React","Fragment","useEffect","useState","PropTypes","connect","getChatById","addComment","Link","Post","profile","chat","match","params","chatId","formData","setFormData","text","onChange","e","target","name","value","post","posts","find","_id","toString","postId","title","preventDefault","comments","length","map","comment","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\nimport { addComment } from '../../actions/chat';\nimport { Link } from 'react-router-dom';\n\nconst Post = ({\n  getChatById,\n  addComment,\n  profile: { chat },\n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.chatId)\n  }, [getChatById, match.params.chatId]);\n\n  const [formData, setFormData] = useState({\n    text: ''\n  });\n\n  const { text } = formData;\n\n  const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n  /*\n  let post;\n  return chat ? <Fragment>\n    {post = chat.posts.find(post => post._id.toString() === match.params.postId)}\n    <h1>{post.title}</h1>\n    <h1>Test</h1>\n  </Fragment> : <p>Loading...</p>\n  */\n  if (!chat) return <p>Loading...</p>;\n\n  const post = chat.posts.find(post =>\n    post._id.toString() === match.params.postId);\n\n  return <Fragment>\n    <div className=\"profile bg-light\">\n      <div>\n        <h2>{post.title}</h2>\n      </div>\n      <div>\n        {post.text}\n      </div>\n    </div>\n    <br />\n    <h2>Comments:</h2>\n    <div className=\"post-form-header bg-primary\">\n      <h3>Create a Comment</h3>\n    </div>\n    <form className=\"form my-1\" onSubmit={e => {\n      e.preventDefault();\n      addComment(match.params.chatId, match.params.postId, { text });\n    }}\n    >\n      <textarea\n        cols=\"30\"\n        rows=\"5\" placeholder=\"Create a comment\"\n        name='text'\n        value={text}\n        onChange={e => onChange(e)}\n      />\n      <input type=\"submit\" value=\"Submit\" class=\"btn btn-dark my-1\" />\n    </form>\n    <br />\n    {post.comments.length > 0 ? post.comments.map(comment => (\n      <div className=\"profile bg-light\" key={comment._id}>\n        <div>\n          <h4>\n            {comment.text}\n          </h4>\n        </div>\n      </div>\n    )) : <h4>No comments</h4>}\n  </Fragment>\n\n}\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n})\n\nexport default connect(mapStateToProps, { getChatById, addComment })(Post);"]},"metadata":{},"sourceType":"module"}